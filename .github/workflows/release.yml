name: Release Management

on:
  push:
    tags:
      - 'v*'

env:
  PYTHON_VERSION: "3.11"

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Create Release
        id: create_release
        run: |
          gh release create ${{ github.ref_name }} \
            --title "Release ${{ github.ref_name }}" \
            --notes "## üöÄ What's New in ${{ github.ref_name }}
            
            ### ‚ú® Features
            - Enhanced CI/CD pipeline
            - Improved code quality checks
            - Comprehensive security scanning
            - Automated dependency management
            - AIÂìÅË≥™Âêë‰∏ä„Ç∑„Çπ„ÉÜ„É†Áµ±Âêà
            
            ### üêõ Bug Fixes
            - Various improvements and optimizations
            
            ### üì¶ Installation
            
            \`\`\`bash
            pip install github-actions-ai-analyzer==${{ github.ref_name }}
            \`\`\`
            
            ### üìö Documentation
            
            For detailed documentation, visit our [GitHub repository](https://github.com/scottlz0310/Github-Actions-AI-Analyzer).
            
            ### ü§ù Contributing
            
            We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        run: |
          gh release upload ${{ github.ref_name }} \
            ./dist/github_actions_ai_analyzer-${{ github.ref_name }}.tar.gz \
            ./dist/github_actions_ai_analyzer-${{ github.ref_name }}-py3-none-any.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  pypi-publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: release
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/*

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [release, pypi-publish]
    if: always()
    steps:
      - name: Notify on success
        if: needs.release.result == 'success' && needs.pypi-publish.result == 'success'
        run: |
          echo "‚úÖ Release ${{ github.ref_name }} created successfully!"
          echo "üì¶ Package available on PyPI"
          echo "üè∑Ô∏è  GitHub Release created"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify on failure
        if: needs.release.result == 'failure' || needs.pypi-publish.result == 'failure'
        run: |
          echo "‚ùå Release ${{ github.ref_name }} failed!"
          echo "Release result: ${{ needs.release.result }}"
          echo "PyPI publish result: ${{ needs.pypi-publish.result }}"
          echo "Please check the logs for details."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 