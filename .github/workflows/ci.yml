name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]
  workflow_dispatch:  # 手動実行を有効化

env:
  PYTHON_VERSION: "3.11"
  PIP_CACHE_DIR: ~/.cache/pip

jobs:
  # コード品質チェック
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install black isort flake8 mypy bandit safety

      - name: Run Black (code formatting)
        run: |
          black --check --diff src/ tests/ examples/
          echo "✅ Code formatting check passed"

      - name: Run isort (import sorting)
        run: |
          isort --check-only --diff src/ tests/ examples/
          echo "✅ Import sorting check passed"

      - name: Run Flake8 (linting)
        run: |
          flake8 src/ tests/ examples/ --max-line-length=79 --extend-ignore=E203,W503
          echo "✅ Linting check passed"

      - name: Run MyPy (type checking)
        run: |
          mypy src/ --ignore-missing-imports --disallow-untyped-defs
          echo "✅ Type checking passed"

      - name: Run Bandit (security scanning)
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          echo "✅ Security scanning completed"

      - name: Run Safety (dependency vulnerability check)
        run: |
          safety check --json --output safety-report.json || true
          echo "✅ Dependency vulnerability check completed"

  # テスト実行
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run tests with coverage
        run: |
          pytest tests/ --cov=src/ --cov-report=xml --cov-report=html --cov-report=term-missing -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-ubuntu-${{ env.PYTHON_VERSION }}
          path: htmlcov/

  # 統合テスト
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --tb=short

      - name: Test CLI functionality
        run: |
          python -m github_actions_ai_analyzer.cli --help
          echo "✅ CLI help command works"

  # ビルドテスト
  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/

  # PyPIデプロイ（リリース時のみ）
  deploy:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    needs: [code-quality, test, build-test]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: pypi
      url: https://pypi.org/p/github-actions-ai-analyzer
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## What's Changed
            
            This release includes:
            - Automated deployment via GitHub Actions
            - Enhanced code quality checks
            - Comprehensive test coverage
            
            ## Installation
            
            ```bash
            pip install github-actions-ai-analyzer==${{ github.ref_name }}
            ```
          draft: false
          prerelease: false

  # ドキュメント生成
  docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install sphinx sphinx-rtd-theme

      - name: Generate documentation
        run: |
          cd docs
          make html
          echo "✅ Documentation generated"

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/_build/html/

  # セキュリティスキャン
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # パフォーマンステスト
  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install pytest-benchmark

      - name: Run performance tests
        run: |
          pytest tests/ --benchmark-only --benchmark-skip --benchmark-min-rounds=10

  # 依存関係の更新チェック
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install pip-tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools

      - name: Check for outdated dependencies
        run: |
          pip list --outdated --format=freeze | grep -v "^-e" || echo "All dependencies are up to date"

      - name: Create Dependabot alert
        uses: actions/github-script@v6
        with:
          script: |
            const { data: alerts } = await github.rest.dependabot.listRepoAlerts({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            if (alerts.length > 0) {
              console.log(`Found ${alerts.length} Dependabot alerts`);
              for (const alert of alerts) {
                console.log(`- ${alert.security_vulnerability.package.name}: ${alert.security_vulnerability.severity}`);
              }
            } else {
              console.log('No Dependabot alerts found');
            } 